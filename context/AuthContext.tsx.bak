import { createContext, useContext, useState, useEffect } from 'react';
import { initializeApp } from 'firebase/app';
import {
  getAuth,
  createUserWithEmailAndPassword,
  signInWithEmailAndPassword,
  signOut,
  onAuthStateChanged,
  User
} from 'firebase/auth';
import { getFirestore } from 'firebase/firestore';

// Your Firebase configuration
const firebaseConfig = {
    apiKey: "AIzaSyDZ2ZyX9XJy2ZyX9XJy2ZyX9XJy2ZyX9XJ",
    authDomain: "gluerillamrktplnr.firebaseapp.com",
    projectId: "gluerillamrktplnr",
    storageBucket: "gluerillamrktplnr.appspot.com",
    messagingSenderId: "106978978978",
    appId: "1:106978978978:web:9a9a9a9a9a9a9a9a9a9a9a"
  // Add your Firebase config here
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);
const auth = getAuth(app);
export const db = getFirestore(app);

export enum Role {
  ADMINPM = 'admin',
  CONTRACTOR = 'user',
}

interface AuthState {
  user: User | null;
  loading: boolean;
  error: string | null;
  role: Role | null;
}

interface AuthContextType {
  authState: AuthState;
  signUp: (email: string, password: string) => Promise<void>;
  signIn: (email: string, password: string) => Promise<void>;
  signOut: () => Promise<void>;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

export const AuthProvider = ({ children }: { children: React.ReactNode }) => {
  const [authState, setAuthState] = useState<AuthState>({
    user: null,
    loading: true,
    error: null,
    role: null,
  });

  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, (user) => {
      setAuthState(prev => ({
        ...prev,
        user,
        loading: false,
        // You might want to fetch the role from Firestore here based on the user's ID
        role: user?.email === 'admin@example.com' ? Role.ADMINPM : Role.CONTRACTOR
      }));
    });

    return unsubscribe;
  }, []);

  const signUp = async (email: string, password: string) => {
    try {
      setAuthState(prev => ({ ...prev, loading: true, error: null }));
      await createUserWithEmailAndPassword(auth, email, password);
    } catch (error) {
      setAuthState(prev => ({
        ...prev,
        error: (error as Error).message,
        loading: false
      }));
      throw error;
    }
  };

  const signIn = async (email: string, password: string) => {
    try {
      setAuthState(prev => ({ ...prev, loading: true, error: null }));
      await signInWithEmailAndPassword(auth, email, password);
    } catch (error) {
      setAuthState(prev => ({
        ...prev,
        error: (error as Error).message,
        loading: false
      }));
      throw error;
    }
  };

  const handleSignOut = async () => {
    try {
      setAuthState(prev => ({ ...prev, loading: true, error: null }));
      await signOut(auth);
    } catch (error) {
      setAuthState(prev => ({
        ...prev,
        error: (error as Error).message,
        loading: false
      }));
      throw error;
    }
  };

  const value = {
    authState,
    signUp,
    signIn,
    signOut: handleSignOut,
  };

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
};